{"version":3,"sources":["Components/CommInput.jsx","Components/Dialog.jsx","Components/AlertDialog.js","Components/MG_generator_ui.jsx","App.js","serviceWorker.js","index.js"],"names":["getSuggestionValue","suggestion","index_title","renderSuggestion","React","Component","ConfirmationDialogRaw","props","onClose","valueProp","value","open","other","useState","setValue","radioGroupRef","useRef","useEffect","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","onEntering","current","focus","aria-labelledby","DialogTitle","id","DialogContent","dividers","RadioGroup","ref","aria-label","name","onChange","event","target","options","map","option","part","books","b","FormControlLabel","key","control","Radio","label","DialogActions","Button","autoFocus","onClick","color","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","maxHeight","ConfirmationDialog","classes","setOpen","className","List","component","role","ListItem","button","divider","aria-haspopup","aria-controls","ListItemText","primary","secondary","keepMounted","newValue","AlertDialog","handleClose","aria-describedby","DialogContentText","message","MG_generator_ui","state","selectedBook","availble_comms","bookOptions","waitingForFile","alert","baseAPIurl","generatorServerBaseAPIurl","axios","get","this","then","res","data","contents","console","log","length","parts","i","subBookOption","j","push","title","setState","book","filter","o","type","toLowerCase","disabled","v","a","findIndex","t","base_ref","slice","listBibleBooks","post","trans","coms","selected_comm","fileID","intervalID","setInterval","responseType","status","myBlob","Blob","blobUrl","URL","createObjectURL","bookURL","clearInterval","catch","err","getCommsForBook","hasSelectAll","requestBook","CircularProgress","href","download","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0f77a2a2.chunk.js","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest'\nimport theme from './CommInput.css'\n\n\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.index_title;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.index_title}\n    </div>\n);\n\nclass CommInput extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Teach Autosuggest how to calculate suggestions for any given input value.\n    getSuggestions(value) {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n\n        return inputLength === 0 ? [] : this.props.options.filter(c => c.index_title.toLowerCase().slice(0, inputLength) === inputValue);\n    }\n\n    onChange = (event, { newValue }) => {\n        this.setState({\n            value: newValue\n        });\n        this.props.onChange(newValue);\n    };\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n            suggestions: this.getSuggestions(value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    componentWillReceiveProps(){\n        // this.props.options = Array.from(new Set(this.props.options.index_title));\n    }\n\n    render() {\n        const { value, suggestions } = this.state;\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Choose a commentator',\n            value,\n            onChange: this.onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n                theme={theme}\n            />\n        );\n    }\n\n\n}\n\nexport default CommInput;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst options = [\n    'None',\n    'Atria',\n    'Callisto',\n    'Dione',\n    'Ganymede',\n    'Hangouts Call',\n    'Luna',\n    'Oberon',\n    'Phobos',\n    'Pyxis',\n    'Sedna',\n    'Titania',\n    'Triton',\n    'Umbriel',\n];\n\nfunction ConfirmationDialogRaw(props) {\n    const { onClose, value: valueProp, open, ...other } = props;\n    const [value, setValue] = React.useState(valueProp);\n    const radioGroupRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (!open) {\n            setValue(valueProp);\n        }\n    }, [valueProp, open]);\n\n    const handleEntering = () => {\n        if (radioGroupRef.current != null) {\n            radioGroupRef.current.focus();\n        }\n    };\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = () => {\n        onClose(value);\n    };\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick\n            disableEscapeKeyDown\n            maxWidth=\"xs\"\n            onEntering={handleEntering}\n            aria-labelledby=\"confirmation-dialog-title\"\n            open={open}\n            {...other}\n        >\n            <DialogTitle id=\"confirmation-dialog-title\">Bible Books</DialogTitle>\n            <DialogContent dividers>\n                <RadioGroup\n                    ref={radioGroupRef}\n                    aria-label=\"ringtone\"\n                    name=\"ringtone\"\n                    value={value}\n                    onChange={handleChange}\n                >\n                    {props.options.map((option) => { \n                        return <>\n                        <p>{option.part}</p>\n                        {option.books.map((b) => \n                            <FormControlLabel value={b} key={b} control={<Radio />} label={b} />\n                        )}\n                        </>\n                    })}\n\n                </RadioGroup>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleCancel} color=\"primary\">\n                    Cancel\n        </Button>\n                <Button onClick={handleOk} color=\"primary\">\n                    Ok\n        </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmationDialogRaw.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    paper: {\n        width: '80%',\n        maxHeight: 435,\n    },\n}));\n\nexport default function ConfirmationDialog(props) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState('Genesis');\n\n    const handleClickListItem = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (newValue) => {\n        setOpen(false);\n\n        if (newValue) {\n            setValue(newValue);\n            props.onChange(newValue);\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <List component=\"div\" role=\"list\">\n                <ListItem\n                    button\n                    divider\n                    aria-haspopup=\"true\"\n                    aria-controls=\"ringtone-menu\"\n                    aria-label=\"phone ringtone\"\n                    onClick={handleClickListItem}\n                    role=\"listitem\"\n                >\n                    <ListItemText primary=\"Choose a book\" secondary={value} />\n                </ListItem>\n                <ConfirmationDialogRaw\n                    classes={{\n                        paper: classes.paper,\n                    }}\n                    id=\"ringtone-menu\"\n                    keepMounted\n                    open={open}\n                    onClose={handleClose}\n                    value={value}\n                    options={props.options}\n                />\n            </List>\n        </div>\n    );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog(props) {\n  const [open, setOpen] = React.useState(true);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"There was an error while trying to create the requested document\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {props.message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React from 'react';\nimport axios from 'axios';\nimport './MG_generator_ui.css'\nimport CommInput from './CommInput'\nimport MultiSelect from \"react-multi-select-component\";\nimport ConfirmationDialog from './Dialog'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport { Dialog } from '@material-ui/core';\nimport AlertDialog from './AlertDialog';\n\n\nclass MG_generator_ui extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedBook: '',\n            availble_comms: [],\n            bookOptions: [{\n                part: 'Torah',\n                books: ['Genesis']\n            }],\n            waitingForFile: false,\n            alert: false\n        };\n        this.baseAPIurl = 'https://www.sefaria.org.il/api/';\n        this.generatorServerBaseAPIurl = 'http://ec2-3-134-87-226.us-east-2.compute.amazonaws.com:3002/';\n    }\n\n    listBibleBooks() {\n        axios.get(this.baseAPIurl + 'index/')\n            .then((res) => res.data).then(data => {\n                data = data[0].contents;\n                console.log(data.length);\n\n                var bookOptions = [];\n                var parts = ['Torah', 'Nevi\\'im', 'Ketuvim']\n\n                for (var i = 0; i < 3; i++) {\n                    var subBookOption = [];\n                    for (var j = 0; j < (data[i].contents).length; j++) {\n                        var a =\n                            subBookOption.push((data[i].contents)[j].title)\n                    }\n                    // console.log(subBookOption)\n                    bookOptions.push({\n                        books: subBookOption,\n                        part: parts[i]\n                    })\n                }\n\n                // console.log(bookOptions)\n                this.setState({ 'bookOptions': bookOptions })\n            })\n    }\n\n    getCommsForBook(book) {\n        axios.get(this.baseAPIurl + 'links/' + book + '.1.2').then(res => res.data)\n            .then(data => {\n                return data.filter(o => {\n                    return o.type.toLowerCase() == 'commentary';\n                })\n            })\n            .then(data => {\n                return data.map(o => {\n                    var newObj = {\n                        label: o.index_title,\n                        value: o,\n                        disabled: false\n                    };\n                    return newObj;\n                });\n            })\n            .then(data => { //remove duplicates\n                // console.log(data)\n                return data.filter((v, i, a) => a.findIndex(t => (t.label === v.label)) === i)\n            })\n            .then(data => {\n                return data.map(o => {\n                    // console.log(o)\n                    o.base_ref = o.value.ref.slice(0, -5)\n                    return o;\n                })\n            })\n            .then(data => this.setState({ availble_comms: data }))\n    }\n\n    componentDidMount() {\n        this.listBibleBooks();\n    }\n\n    requestBook() {\n        axios.post(this.generatorServerBaseAPIurl + 'generate',\n            {\n                book: this.state.selectedBook,\n                trans: 'default',\n                coms: this.state.selected_comm,\n            })\n            .then(res => { this.setState({ fileID: res.data.fileID }) })\n            .then(() => { this.setState({ waitingForFile: true }) })\n            .then(() => {\n                this.intervalID = setInterval(() => {\n                    axios.get(this.generatorServerBaseAPIurl + 'file/' + this.state.fileID, { responseType: 'blob' })\n                        .then(res => {\n                            if (res.status == 200 || res.status == 304) {\n                                var myBlob = new Blob([res.data], {\n                                    type: 'application/pdf'\n                                });\n                                var blobUrl = URL.createObjectURL(myBlob);\n                                this.setState({\n                                    bookURL: blobUrl,\n                                    waitingForFile: false\n                                })\n                                clearInterval(this.intervalID);\n                            }\n                        })\n                        .catch(err => {\n                            if (err.status == 504){\n                            this.setState({alert: true})\n                            clearInterval(this.intervalID);\n                            }\n                        }) \n                }, 1500)\n            })\n    }\n\n    render() {\n        return (\n            <div id=\"main\">\n                <h3>Mikraot Gedolot Generator</h3> \n                <hr/>\n                <div id=\"form\">\n                    <ConfirmationDialog options={this.state.bookOptions} onChange={b => {\n                        this.setState({ selectedBook: b })\n                        this.getCommsForBook(b)\n                    }}></ConfirmationDialog>\n                    <br />\n                    <MultiSelect\n                        options={this.state.availble_comms}\n                        value={this.state.selected_comm}\n                        onChange={b => this.setState({ selected_comm: b })}\n                        hasSelectAll={false}>\n                    </MultiSelect>\n                    <br />\n                    <input type=\"submit\" value=\"Generate MG\" onClick={() => {\n                        this.requestBook()\n                        this.setState({\n                            selected_comm: ''\n                        })\n                    }}></input>\n                </div>\n                {this.state.waitingForFile ? <CircularProgress /> :\n                    <a disabled={!this.state.waitingForFile} href={this.state.bookURL} download={this.state.selectedBook + '.pdf'}>Click here to download the book</a>}\n                \n                {this.state.alert ? <AlertDialog message={\"Currently, JPS footnotes are unsupported. If you are not using JPS footnotes please contact the developers.\"}></AlertDialog> : <></>}\n            </div>\n        )\n    }\n}\n\nexport default MG_generator_ui","import React from 'react';\nimport './App.css';\nimport MG_generator_ui from './Components/MG_generator_ui'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Custom Mikraot Gedolot Generator</h1>\n        <h2>Submitted to the Sefaria Contest by: Eshel Sinclair</h2>\n      </header>\n\n      <div id=\"body\">\n      <div class=\"instructions\">\n            <h3 class=\"instructions\">Details</h3>\n            <p>\n            With our app, based on Sefaria's Yam Shel Torah, you can now create your own Mikraot Gedolot! <br/>\n            You choose the book from Tanach, and then you can choose any one of Sefaria's translations on that book, and up to 9 commentaries on the book. The PDF that the app then creates is downloadable and printable, and it's just like the best of today's modern Mikraot Gedolot. Readable print, and the commentaries on a pasuk stay on the page, so no flipping back and forth! <br/>\nOur app is great for anyone who wants to utilize Sefaria and likes learning in the Mikraot Gedolot format. It could be great for teachers who want to prepare sefarim for their students with only specific commentaries. \nWe think our app can really help us all learn Torah.        </p>\n          </div>\n        <section class=\"info\">\n          <div class=\"instructions\">\n            <h3>Instructions:</h3>\n            <p>\n              1. Choose a book from the Tanakh. <br />\n          2. Choose a translation that will appear alongside the source. <br />\n          3. Choose any number of commentators that you wish to appear in your book.<br />\n          4. Click \"generate\". <br />\n          5. Wait until the script finishes creating the book and click to download the book. (this can take up to a couple of minutes)\n        </p>\n          </div>\n          <div class=\"instructions\">\n            <h3>Demo version disclaimer:</h3>\n            <p>\n              This is a demo version of the complete project, and is thus limited as follows: <br/>\n              - Generating a Mikraot Gedolot book for and entire <i>sefer</i> is a long process (can take up to an hour due to many calls to the Sefaria API and compiling it into a PDF), \n              therefore this demo is limited to the first 5 verses.  <br/>\n              - JPS Footnotes are currently unsupported.  \n            </p>\n          </div>\n        </section>\n\n        <MG_generator_ui></MG_generator_ui>\n\n        <footer>\n          <p>\n            This project uses the non-commercial version of Prince <a target=\"_blank\" href=\"https://www.princexml.com\">www.princexml.com</a>\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}